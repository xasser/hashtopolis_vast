name: Docker â€“ Build & Publish (low-disk multi-arch)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*", "*.*.*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: docker.io/xasser/hashtovast
  TMP_TAG: tmp-${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  build-arch:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
          - platform: linux/arm64
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Free disk space (fast)
        timeout-minutes: 3
        shell: bash
        run: |
          set -euxo pipefail
          df -h /
          sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc || true
          docker system prune -af || true
          df -h /

      - name: Set up QEMU (for cross emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx (tight GC)
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: "--oci-worker-gc --oci-worker-gc-keepstorage=4000"

      - name: Login to Docker Hub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push (single-arch)
        if: ${{ github.event_name != 'pull_request' }}
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.TMP_TAG }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Save digest artifact
        if: ${{ github.event_name != 'pull_request' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "${{ steps.build.outputs.digest }}" > digest.txt

      - name: Upload digest
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ matrix.arch }}
          path: digest.txt

  manifest:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [ build-arch ]

    steps:
      - name: Download digests (keep separate dirs)
        uses: actions/download-artifact@v4
        with:
          pattern: digest-*
          merge-multiple: false   # <-- key change; creates digest-amd64/, digest-arm64/

      - name: Docker metadata (final tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create multi-arch manifest
        shell: bash
        run: |
          set -euxo pipefail
          DIGEST_AMD64=$(cat digest-amd64/digest.txt)
          DIGEST_ARM64=$(cat digest-arm64/digest.txt)

          # Convert newline-separated tags to repeated -t flags
          TAGS="${{ steps.meta.outputs.tags }}"
          DEST_ARGS=""
          while IFS= read -r tag; do
            [ -n "$tag" ] && DEST_ARGS="$DEST_ARGS -t $tag"
          done <<< "$TAGS"

          docker buildx imagetools create $DEST_ARGS "$DIGEST_AMD64" "$DIGEST_ARM64"

          FIRST_TAG="$(printf '%s\n' "$TAGS" | head -n1)"
          docker buildx imagetools inspect "$FIRST_TAG" || true
